name: Publish Artifacts

on:
  workflow_call:
    inputs:
      java_version:
        description: 'The Java version to use'
        required: false
        type: string
        default: '17'
      release_version:
        description: 'The release version to use'
        required: false
        type: string
        default: ''

jobs:
  secret-presence:
    runs-on: ubuntu-latest
    outputs:
      HAS_OSSRH: ${{ steps.secret-presence.outputs.HAS_OSSRH }}
    steps:
      - name: Check whether secrets exist
        id: secret-presence
        run: |
          [ ! -z "${{ secrets.GPG_PASSPHRASE }}" ] && 
          [ ! -z "${{ secrets.GPG_PRIVATE_KEY }}" ] && 
          [ ! -z "${{ secrets.OSSRH_USERNAME }}" ] && 
          [ ! -z "${{ secrets.OSSRH_PASSWORD }}" ]  && 
          echo "HAS_OSSRH=true" >> $GITHUB_OUTPUT
          exit 0

  publish-to-sonatype:
    name: "Publish artifacts to OSSRH Snapshots / MavenCentral"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: [ secret-presence ]

    if: |
      needs.secret-presence.outputs.HAS_OSSRH
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'
          settings-path: ${{ github.workspace }}

      - uses: ./.github/workflows/workflow-import-gpg-key.yml
        name: "Import GPG Key"
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Configure Maven settings
        run: |
          mkdir -p $HOME/.m2
          echo "<settings xmlns='http://maven.apache.org/SETTINGS/1.0.0' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xsi:schemaLocation='http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd'>
            <servers>
              <server>
                <id>ossrh</id>
                <username>${{ secrets.OSSRH_USERNAME }}</username>
                <password>${{ secrets.OSSRH_PASSWORD }}</password>
              </server>
            </servers>
          </settings>" > $HOME/.m2/settings.xml

      - name: Copy License information
        run: |
          for module in $(find . -name "pom.xml" -exec dirname {} \;); do
            echo "Processing module: $module"
            mkdir -p "$module/src/main/resources/META-INF/"
            cp LICENSE NOTICE.md DEPENDENCIES SECURITY.md "$module/src/main/resources/META-INF/"
          done

      - name: Prepare release version
        run: |
          if [ "${{ inputs.release_version }}" = "" ]; then
            echo "RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
          else
            echo "RELEASE_VERSION="${{ inputs.release_version}}">> $GITHUB_ENV
          fi

      - name: Publish version
        run: |-
           mvn clean deploy -s $HOME/.m2/settings.xml -Dgpg.passphrase="${{ secrets.GPG_PASSPHRASE }}" -Prelease -Drevision=${{ env.RELEASE_VERSION }}